# If you change something here, you will probably want to change it there too: `../../build/dev/build-docker.sh`

name: Build and release

on: [ create ]

env:
  PHP_VERSION: 8.3
  MSODBC_SQL_APK_URI: https://download.microsoft.com/download/7/6/d/76de322a-d860-4894-9945-f0cc5d6a45f8/msodbcsql18_18.4.1.1-1_amd64.apk
  MSSQL_TOOLS_APK_URI: https://download.microsoft.com/download/7/6/d/76de322a-d860-4894-9945-f0cc5d6a45f8/mssql-tools18_18.4.1.1-1_amd64.apk
  MSODBC_SQL_SIG_URI: https://download.microsoft.com/download/7/6/d/76de322a-d860-4894-9945-f0cc5d6a45f8/msodbcsql18_18.4.1.1-1_amd64.sig
  MSSQL_TOOLS_SIG_URI: https://download.microsoft.com/download/7/6/d/76de322a-d860-4894-9945-f0cc5d6a45f8/mssql-tools18_18.4.1.1-1_amd64.sig
  REGISTRY: ghcr.io
  IMAGE_NAME: waldhacker/pseudify-ai

jobs:
  code-quality:
    name: Check code quality

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PHP version ${{ env.PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2

      - name: Get composer cache directory
        id: composer_cache
        working-directory: ./src
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        with:
          path: ${{ steps.composer_cache.outputs.dir }}
          key: ${{ runner.os }}-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-${{ env.PHP_VERSION }}-composer-

      - name: Environment check
        run: |
          php --version
          composer --version

      - name: Install dependencies
        working-directory: ./src
        run: composer install --optimize-autoloader --classmap-authoritative --no-progress --no-interaction

      - name: Composer normalize
        working-directory: ./src
        run: composer run composer:normalize:check

      - name: CGL
        working-directory: ./src
        run: composer run cgl:check

      - name: Psalm
        working-directory: ./src
        run: composer run psalm

      - name: PHPStan
        working-directory: ./src
        run: composer run stan

  build-install-package:
    name: Build install package

    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [code-quality]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build
        run: ./build/build-install-package.sh

      - name: Upload install package
        uses: actions/upload-artifact@v4
        with:
          name: install-package
          path: ./.build/install-package.tar.gz

  build-and-push-docker-image:
    name: Build and push docker image

    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [code-quality]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install deps
        run: DEBIAN_FRONTEND=noninteractive sudo apt-get install -y -o Dpkg::Options::="--force-confnew" --no-install-recommends rsync

      - name: Copy files
        run: |
          mkdir -p ./.build/docker/context/userdata/
          mkdir -p ./.build/docker/context/core/src/bin/
          rsync -raq ./build/docker/         ./.build/docker/context/
          rsync -raq ./src/assets/           ./.build/docker/context/core/src/assets/
          rsync -raq ./src/bin/pseudify      ./.build/docker/context/core/src/bin/pseudify
          rsync -raq ./src/config/           ./.build/docker/context/core/src/config/
          rsync -raq ./src/public/           ./.build/docker/context/core/src/public/
          rsync -raq ./src/src/              ./.build/docker/context/core/src/src/
          rsync -raq ./src/templates/        ./.build/docker/context/core/src/templates/
          rsync -raq ./src/translations/     ./.build/docker/context/core/src/translations/
          rsync -raq ./src/composer.json     ./.build/docker/context/core/src/composer.json
          rsync -raq ./src/composer.lock     ./.build/docker/context/core/src/composer.lock
          rsync -raq ./src/importmap.php     ./.build/docker/context/core/src/importmap.php
          rsync -raq ./src/symfony.lock      ./.build/docker/context/core/src/symfony.lock
          rsync -raq ./userdata/config/      ./.build/docker/context/userdata/config/
          rsync -raq ./userdata/src/         ./.build/docker/context/userdata/src/
          rsync -raq ./userdata/.env.example ./.build/docker/context/userdata/.env.example
          rsync -raq ./userdata/.env.example ./.build/docker/context/userdata/.env

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags) for docker
        id: docker_metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          file: ./build/Dockerfile
          context: ./.build/docker/context
          build-args: |
            PHP_VERSION=${{ env.PHP_VERSION }}
            MSODBC_SQL_APK_URI=${{ env.MSODBC_SQL_APK_URI }}
            MSSQL_TOOLS_APK_URI=${{ env.MSSQL_TOOLS_APK_URI }}
            MSODBC_SQL_SIG_URI=${{ env.MSODBC_SQL_SIG_URI }}
            MSSQL_TOOLS_SIG_URI=${{ env.MSSQL_TOOLS_SIG_URI }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker_metadata.outputs.tags }}
          labels: ${{ steps.docker_metadata.outputs.labels }}

  create-release:
    name: Create release

    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [code-quality, build-install-package, build-and-push-docker-image]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download install package
        uses: actions/download-artifact@v4
        with:
          name: install-package
          path: ./.build/artifacts/

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ''
          draft: false
          prerelease: false   

      - name: Upload install package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./.build/artifacts/install-package.tar.gz
          asset_name: install-package.tar.gz
          asset_content_type: application/gzip
